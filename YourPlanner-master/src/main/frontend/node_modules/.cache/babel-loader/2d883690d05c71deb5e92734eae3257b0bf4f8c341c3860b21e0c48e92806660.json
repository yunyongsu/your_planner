{"ast":null,"code":"import React,{useState}from'react';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const SaveTourInfo=_ref=>{let{startDate,endDate,departure,destination,selectedItems,selectedTrains={selectedTrains}}=_ref;const[isModalOpen,setIsModalOpen]=useState(false);const[saveTitle,setSaveTitle]=useState('');const handleSave=title=>{setSaveTitle(title);setIsModalOpen(false);sendSaveRequest(title);};const sendSaveRequest=title=>{const userId=sessionStorage.getItem('loginId');const userNo=sessionStorage.getItem('userNo');/* 값이 잘 받아지는지 console로 확인 */if(userId){console.log('Logged in user ID:',userId);console.log('Logged in userNo:',userNo);}else{console.log('No user ID found in session storage.');}console.log('Selected Items:',selectedItems);console.log('Start Date:',startDate);console.log('End Date:',endDate);console.log('Departure:',departure);console.log('Destination:',destination);console.log('selectedTrains:',selectedTrains);console.log('title:',saveTitle);/* 컨트롤러로 api값 전송 */fetch('/api/savePlan',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({userNo:userNo,startDate:startDate,endDate:endDate,departure:departure,destination:destination,selectedItems:selectedItems,selectedTrains:selectedTrains,saveTitle:title})}).then(response=>{if(!response.ok){throw new Error('Network response was not ok');}return response.text();}).then(text=>{if(text){return JSON.parse(text);// 텍스트가 비어있지 않으면 JSON으로 파싱\n}return{};// 텍스트가 비어있으면 빈 객체 반환\n}).then(data=>{console.log(data);// 서버에서 받은 응답을 콘솔에 출력\n}).catch(error=>{console.error('Error sending selected items to backend:',error);});};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"button\",{onClick:()=>setIsModalOpen(true),children:\"\\uC800\\uC7A5\"}),/*#__PURE__*/_jsx(Modal,{isOpen:isModalOpen,onClose:()=>setIsModalOpen(false),onSave:handleSave})]});};// 모달 컴포넌트\nconst Modal=_ref2=>{let{isOpen,onClose,onSave}=_ref2;const[title,setTitle]=useState('');if(!isOpen){return null;}const handleSave=()=>{onSave(title);alert('저장이 완료되었습니다!');};return/*#__PURE__*/_jsx(\"div\",{className:\"modal\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"modal-content\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"\\uC81C\\uBAA9\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:title,onChange:e=>setTitle(e.target.value)}),/*#__PURE__*/_jsx(\"button\",{onClick:handleSave,children:\"\\uC800\\uC7A5\"}),/*#__PURE__*/_jsx(\"button\",{onClick:onClose,children:\"\\uB2EB\\uAE30\"})]})});};export default SaveTourInfo;","map":{"version":3,"names":["React","useState","jsx","_jsx","jsxs","_jsxs","SaveTourInfo","_ref","startDate","endDate","departure","destination","selectedItems","selectedTrains","isModalOpen","setIsModalOpen","saveTitle","setSaveTitle","handleSave","title","sendSaveRequest","userId","sessionStorage","getItem","userNo","console","log","fetch","method","headers","body","JSON","stringify","then","response","ok","Error","text","parse","data","catch","error","children","onClick","Modal","isOpen","onClose","onSave","_ref2","setTitle","alert","className","type","value","onChange","e","target"],"sources":["D:/_dev/intellij/YourPlanner-master/src/main/frontend/src/components/js/SaveTourInfo.jsx"],"sourcesContent":["import React, { useState } from 'react';\n\nconst SaveTourInfo = ({ startDate, endDate, departure, destination, selectedItems, selectedTrains={selectedTrains} }) => {\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [saveTitle, setSaveTitle] = useState('');\n\n    const handleSave = (title) => {\n        setSaveTitle(title);\n        setIsModalOpen(false);\n        sendSaveRequest(title);\n    };\n\n    const sendSaveRequest = (title) => {\n        const userId = sessionStorage.getItem('loginId');\n        const userNo = sessionStorage.getItem(('userNo'));\n\n        /* 값이 잘 받아지는지 console로 확인 */\n        if (userId) {\n            console.log('Logged in user ID:', userId);\n            console.log('Logged in userNo:', userNo);\n        } else {\n            console.log('No user ID found in session storage.');\n        }\n        console.log('Selected Items:', selectedItems);\n        console.log('Start Date:', startDate);\n        console.log('End Date:', endDate);\n        console.log('Departure:', departure);\n        console.log('Destination:', destination);\n        console.log('selectedTrains:', selectedTrains);\n        console.log('title:', saveTitle);\n\n        /* 컨트롤러로 api값 전송 */\n        fetch('/api/savePlan', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                userNo: userNo,\n                startDate: startDate,\n                endDate: endDate,\n                departure: departure,\n                destination: destination,\n                selectedItems:  selectedItems,\n                selectedTrains: selectedTrains,\n                saveTitle: title\n            })\n        })\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error('Network response was not ok');\n                }\n                return response.text();\n            })\n            .then(text => {\n                if (text) {\n                    return JSON.parse(text); // 텍스트가 비어있지 않으면 JSON으로 파싱\n                }\n                return {}; // 텍스트가 비어있으면 빈 객체 반환\n            })\n            .then(data => {\n                console.log(data); // 서버에서 받은 응답을 콘솔에 출력\n            })\n            .catch(error => {\n                console.error('Error sending selected items to backend:', error);\n            });\n    };\n\n    return(\n        <div>\n            <button onClick={() => setIsModalOpen(true)}>저장</button>\n            <Modal\n                isOpen={isModalOpen}\n                onClose={() => setIsModalOpen(false)}\n                onSave={handleSave}\n            />\n        </div>\n    );\n}\n\n// 모달 컴포넌트\nconst Modal = ({isOpen, onClose, onSave}) => {\n    const [title, setTitle] = useState('');\n\n    if (!isOpen) {\n        return null;\n    }\n\n    const handleSave = () => {\n        onSave(title);\n        alert('저장이 완료되었습니다!');\n    };\n\n    return (\n        <div className=\"modal\">\n            <div className=\"modal-content\">\n                <h2>제목을 입력하세요</h2>\n                <input\n                    type=\"text\"\n                    value={title}\n                    onChange={(e) => setTitle(e.target.value)}\n                />\n                <button onClick={handleSave}>저장</button>\n                <button onClick={onClose}>닫기</button>\n            </div>\n        </div>\n    );\n};\n\n\n\nexport default SaveTourInfo;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}